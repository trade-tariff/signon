version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  browser-tools: circleci/browser-tools@1.1
  cloudfoundry: circleci/cloudfoundry@1.0
  queue: eddiewebb/queue@1.6.4
  ruby: circleci/ruby@1
  slack: circleci/slack@4.3.0
  tariff: trade-tariff/trade-tariff-ci-orb@0 # can also change to @dev:<gitsha> for specific version or @dev:alpha to test dev branches

commands:
  cf_deploy_docker:
    parameters:
      docker_image_tag:
        type: string
      space:
        type: string
      environment_key:
        type: string
    steps:
      - checkout
      - tariff/cf-install:
          space: << parameters.space >>
      - run:
          name: "Fetch existing manifest"
          command: |
            cf create-app-manifest "signon-<< parameters.environment_key >>" -p deploy_manifest.yml
      - run:
          name: "Push new app in dark mode"
          command: |
            export DOCKER_IMAGE=signon
            export DOCKER_TAG="<< parameters.docker_image_tag >>"

            # Push as "dark" instance
            CF_DOCKER_PASSWORD=$AWS_SECRET_ACCESS_KEY cf push "signon-<< parameters.environment_key >>-dark" -f deploy_manifest.yml --no-route  --docker-image "$ECR_REPO/$DOCKER_IMAGE:$DOCKER_TAG" --docker-username "$AWS_ACCESS_KEY_ID"

            # Map dark route
            cf map-route  "signon-<< parameters.environment_key >>-dark" apps.internal -n "signon-<< parameters.environment_key >>-dark"

            # Attach precreated autoscaling policy
            cf attach-autoscaling-policy "signon-<< parameters.environment_key >>-dark" config/autoscaling/<< parameters.space >>-policy.json

            # Enable routing from this frontend to backend applications which are private
            cf add-network-policy "$CF_FRONTEND_APP-<< parameters.environment_key >>" "signon-<< parameters.environment_key >>-dark" --protocol tcp --port 8080
            cf add-network-policy "$CF_ADMIN_APP-<< parameters.environment_key >>" "signon-<< parameters.environment_key >>-dark" --protocol tcp --port 8080
            cf add-network-policy "$CF_DUTYCALCULATOR_APP-<< parameters.environment_key >>" "signon-<< parameters.environment_key >>-dark" --protocol tcp --port 8080
            cf add-network-policy "signon-<< parameters.environment_key >>-dark" "tariff-search-query-parser-<< parameters.environment_key >>" --protocol tcp --port 8080

      - run:
          name: "Verify new version is working on dark URL."
          command: |
            sleep 15
            # Verify new version is working on dark URL.
            APP_NAME="signon-<< parameters.environment_key >>-dark"

            HTTPCODE=`cf ssh $APP_NAME -c 'curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/healthcheck/ready'`

            if [ "$HTTPCODE" -ne 200 ];then
              echo "dark route not available, failing deploy ($HTTPCODE)"
              cf logs "signon-<< parameters.environment_key >>-dark" --recent
              cf delete -f "signon-<< parameters.environment_key >>-dark"
              exit 1
            fi
      - run:
          name: "Switch dark app to live"
          command: |
            # Send "real" url to new version
            cf unmap-route  "signon-<< parameters.environment_key >>-dark" apps.internal -n "signon-<< parameters.environment_key >>-dark"

            # Start sending traffic to new version
            cf map-route "signon-<< parameters.environment_key >>-dark" apps.internal -n "signon-<< parameters.environment_key >>"
            cf map-route "signon-<< parameters.environment_key >>-dark" "<< parameters.domain_prefix >>.trade-tariff.service.gov.uk" --path "/<< parameters.service >>/api/beta/"

            # Stop sending traffic to previous version
            cf unmap-route "signon-<< parameters.environment_key >>" apps.internal -n "signon-<< parameters.environment_key >>"
            cf unmap-route "signon-<< parameters.environment_key >>" "<< parameters.domain_prefix >>.trade-tariff.service.gov.uk" --path "/<< parameters.service >>/api/beta/"

            # stop previous version
            cf stop "signon-<< parameters.environment_key >>"

            # delete previous version
            cf delete "signon-<< parameters.environment_key >>" -f

            # Switch name of "dark" version to claim correct name
            cf rename "signon-<< parameters.environment_key >>-dark" "signon-<< parameters.environment_key >>"

      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: deployments
          event: pass
          template: basic_success_1
  cf_deploy_docker_worker:
    parameters:
      docker_image_tag:
        type: string
      space:
        type: string
      service:
        type: string
      environment_key:
        type: string
    steps:
      - checkout
      - tariff/cf-install:
          space: << parameters.space >>
      - run:
          name: "Fetch existing manifest"
          command: |
            cf create-app-manifest "signon-worker-<< parameters.environment_key >>" -p deploy_manifest.yml
      - run:
          name: "Push Worker"
          command: |
            export DOCKER_IMAGE=tariff-backend
            export DOCKER_TAG="<< parameters.docker_image_tag >>"
            CF_DOCKER_PASSWORD=$AWS_SECRET_ACCESS_KEY cf push "signon-worker-<< parameters.environment_key >>" -f deploy_manifest.yml --no-route --docker-image "$ECR_REPO/$DOCKER_IMAGE:$DOCKER_TAG" --docker-username "$AWS_ACCESS_KEY_ID"

  cf_deploy_docker_tasks:
    parameters:
      docker_image_tag:
        type: string
      space:
        type: string
      service:
        type: string
      environment_key:
        type: string
    steps:
      - checkout
      - tariff/cf-install:
          space: << parameters.space >>
      - run:
          name: "Create tasks app manifest"
          command: |
            cf create-app-manifest "signon-worker-<< parameters.environment_key >>" -p tasks_deploy_manifest.yml
      - run:
          name: "Push Tasks app"
          command: |
            export DOCKER_IMAGE=tariff-backend
            export DOCKER_TAG="<< parameters.docker_image_tag >>"
            CF_DOCKER_PASSWORD=$AWS_SECRET_ACCESS_KEY cf push "signon-tasks-<< parameters.environment_key >>" \
                                                               -f tasks_deploy_manifest.yml \
                                                               --no-route \
                                                               --task \
                                                               --docker-image "$ECR_REPO/$DOCKER_IMAGE:$DOCKER_TAG" \
                                                               --docker-username "$AWS_ACCESS_KEY_ID"
      - run_migrations:
          environment_key: << parameters.environment_key >>

  sentry-release:
    steps:
      - checkout
      - run:
          name: Create release and notify Sentry of deploy
          command: |
            sudo curl -sL \
                      -o /usr/local/bin/sentry-cli \
                      https://github.com/getsentry/sentry-cli/releases/download/1.74.3/sentry-cli-Linux-x86_64
            sudo chmod 0755 /usr/local/bin/sentry-cli
            export SENTRY_RELEASE=$(sentry-cli releases propose-version)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE &&
              sentry-cli releases set-commits $SENTRY_RELEASE --auto &&
              sentry-cli releases finalize $SENTRY_RELEASE &&
              sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT ||
              /usr/bin/true # prevent sentry outage from blocking deploys - see HOTT-1570

  run_migrations:
    parameters:
      service:
        type: string
      environment_key:
        type: string
    steps:
      - run:
          name: "Run Migrations"
          command: |
            cf run-task "signon-tasks-<< parameters.environment_key >>" --command "cd app && bundle exec rails db:migrate" --name "db-migrate" --wait

jobs:
  linters:
    docker:
      - image: cimg/ruby:2.7.6
    resource_class: small
    steps:
      - checkout
      - run:
          name: Install C lib dependencies
          command: |
            sudo apt update
            sudo apt-get install -y --no-install-suggests --no-install-recommends nodejs libmariadb-dev-compat
      - ruby/install-deps
      - run:
          name: Rubocop changed files
          when: always
          command: bundle exec rubocop $(git diff --name-only --diff-filter=ACM $(git merge-base main HEAD)..HEAD | egrep '\.rb|\.rake') Gemfile
      - run:
          name: Inspecting with Brakeman
          when: always
          command: "bundle exec brakeman -o test-results/brakeman/brakeman.junit -o brakeman.html --no-progress --separate-models"
      - store_test_results:
          path: test-results/brakeman/
      - store_artifacts:
          path: brakeman.html

  build:
    environment:
      IMAGE_NAME: signon
    parameters:
      dev-build:
        default: false
        type: boolean
    docker:
      - image: cimg/ruby:2.7.6
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: false
      - aws-cli/install
      - run:
          name: "Set docker tag"
          command: |
            echo "export DOCKER_TAG=<<# parameters.dev-build >>dev-<</ parameters.dev-build >>${CIRCLE_SHA1}" >> $BASH_ENV
      - run:
          name: "Build Docker image"
          command: |
            export GIT_NEW_REVISION=$(git rev-parse --short HEAD)
            echo $GIT_NEW_REVISION >REVISION
            docker build -t $IMAGE_NAME:$DOCKER_TAG .
      - run:
          name: "Push image"
          command: |
            aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $ECR_REPO
            docker tag $IMAGE_NAME:$DOCKER_TAG $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG
            docker push $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG

  test:
    docker:
      - image: cimg/ruby:2.7.6-node
        environment:
          BUNDLE_JOBS: "3"
          BUNDLE_RETRY: "3"
          RAILS_ENV: "test"
          REDIS_URL: "redis://localhost:6379"
      - image: cimg/mysql:8.0
        environment:
          MYSQL_DATABASE: signonotron2_test
          MYSQL_USER: signonotron2
          MYSQL_PASSWORD: signonotron2
      - image: cimg/redis:6.2.6
    resource_class: medium
    steps:
      - checkout
      - browser-tools/install-chrome
      - run:
          name: "Install OS packages"
          command: |
            sudo apt-get update
            sudo apt-get install -y --no-install-suggests --no-install-recommends nodejs libmariadb-dev-compat
      - ruby/install-deps
      - run: "RAILS_ENV=test bundle exec rails db:schema:load --trace"
      - run:
          name: "Run tests"
          command: |
            RAILS_ENV=test bundle exec rake test
      - slack/notify: # TODO: Remove once proven
          channel: deployments
          event: pass
          template: basic_success_1
      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1

  # deploy_dev:
  #   docker:
  #     - image: cimg/ruby:2.7.6
  #   environment:
  #     SENTRY_ENVIRONMENT: "development"
  #   steps:
  #     - queue/until_front_of_line:
  #         time: "10"
  #         consider-branch: false
  #         dont-quit: true
  #     - cf_deploy_docker_tasks:
  #         docker_image_tag: dev-$CIRCLE_SHA1
  #         space: "development"
  #         environment_key: "dev"
  #     - cf_deploy_docker_worker:
  #         docker_image_tag: dev-$CIRCLE_SHA1
  #         space: "development"
  #         environment_key: "dev"
  #     - cf_deploy_docker:
  #         docker_image_tag: dev-$CIRCLE_SHA1
  #         space: "development"
  #         environment_key: "dev"
  #         domain_prefix: "dev"
  #     - sentry-release

workflows:
  version: 2
  ci:
    jobs:
      - linters:
          context: trade-tariff
      - test:
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main
      - build:
          name: build_dev
          context: trade-tariff
          dev-build: true
          filters:
            branches:
              ignore:
                - main
                - /^dependabot\/.*/
      # - deploy_dev:
      #     context: trade-tariff
      #     filters:
      #       branches:
      #         ignore:
      #           - main
      #           - /^dependabot\/.*/
      #     requires:
      #       - test
      #       - build_dev
